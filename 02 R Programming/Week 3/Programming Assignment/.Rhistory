cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 5000)
summary(cr)
length(cr)
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/scripts/pollutantmean.R')
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/scripts/complete.R')
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/scripts/corr.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", "sulfate", 1:10)
pollutantmean("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", "nitrate", 70:72)
pollutantmean("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", "sulfate", 34)
pollutantmean("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", "nitrate")
cc <- complete("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc
cc <- complete("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 54)
cc
set.seed(42)
cc <- complete("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 332:1)
use <- sample(332, 10)
print(cc[use, 2])
cr <- corr("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 2000)
n <- length(cr)
cr <- coor("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 2000)
n <- length(cr)
cr <- coor("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags[,11:17]
flag_colors <- flags[,11:17]
head_flag_colors
head(flag_colors)
sapply(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lappy(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
spply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate
table(flags$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
head(iris)
mean(iris$Sepal.Length)
colmeans(iris)
colMeans(iris)
?apply
apply(iris[,1:4], 2, mean)
?tapply
with(mtcars, tapply(mpg, cylmean))
with(mtcars, tapply(mpg, cyl,mean))
sapply(split(ntcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp
class(hp)
hp[1]
hp[1]-hp3
hp[1]-hp[3]
debug(ls)
ls()
quit()
exit()
set.seed(1)
rpois(5, 2)
?dpois
?cpois
?qpois
swirl()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), prob = c(.3, .7))
sample(c(0,1), 100, prob = c(.3, .7))
sample(c(0,1), 100, prob = c(.3, .7), replace = TRUE)
sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, lambde = 10)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed, y = dist)
plot(data = cars, x=speed, y = dist)
plot(x=cars$speed, y = cars$dist)
plot(x=cars$dist, y = cars$speed)
?plot
plot(x=cars$dist, y = cars$speed, xlab = "Speed")
plot(x=cars$dist, y = cars$speed, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, main = "My Plot"
)
plot(x=cars$speed, y = cars$dist, main = "My Plot")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", title = "My Plot Subtitle")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(mtcars, mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?nrow
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
rankhospital("MD", "heart failure", 5)
setwd("c:/Users/castnerj/desktop/coursera/datasciencecoursera/Programmingassignment3")
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
## check that num argument is less than the number of hospitals in the subset
if (is.numeric(num) & num > nrow(data.subset)) {
return(NA)
stop()
}
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
rankhospital("MN", "heart attack", "bet")
rankhospital("MN", "heart attack", "best")
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
rankhospital("MN", "heart attack", "best")
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
rankhospital("MN", "heart attack", "best")
rankhospital("MN", "heart attack", 10)
rankhospital("MN", "heart attack", "bet")
clear()
head(rankall("heart attack", 20), 10)
outcome <- "heart attack"
num <- 20
## read the data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## state list
list.states <- unique(data$State)
## check for valid outcome
valid.outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid.outcomes)) {
stop("invalid outcome")
}
## check for valid num
valid.num <- c("best", "worst")
if (!(num %in% valid.num) && !is.numeric(num)) {
stop("invalid num")
}
## subset data by non missing outcome
if (outcome == "heart attack") {
data.subset <- data.subset[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)), ]
} else if (outcome == "heart failure") {
data.subset <- data.subset[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)), ]
} else if (outcome == "pneumonia") {
data.subset <- data.subset[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)), ]
} else {}
## subset data by non missing outcome
if (outcome == "heart attack") {
data.subset <- data[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)), ]
} else if (outcome == "heart failure") {
data.subset <- data[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)), ]
} else if (outcome == "pneumonia") {
data.subset <- data[!is.na(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)), ]
} else {}
## subset data by non missing outcome
if (outcome == "heart attack") {
data.subset <- data[!is.na(as.numeric(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)), ]
} else if (outcome == "heart failure") {
data.subset <- data[!is.na(as.numeric(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)), ]
} else if (outcome == "pneumonia") {
data.subset <- data[!is.na(as.numeric(data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)), ]
} else {}
View(data.subset)
## order the rows by outcome, hospital name
if (outcome == "heart attack") {
data.subset <- data.subset[order(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), data.subset$Hospital.Name), ]
} else if (outcome == "heart failure") {
data.subset <- data.subset[order(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure), data.subset$Hospital.Name), ]
} else if (outcome == "pneumonia") {
data.subset <- data.subset[order(as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia), data.subset$Hospital.Name), ]
} else {}
View(data.subset)
## order the rows by outcome, hospital name
if (outcome == "heart attack") {
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), data.subset$Hospital.Name), ]
} else if (outcome == "heart failure") {
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure), data.subset$Hospital.Name), ]
} else if (outcome == "pneumonia") {
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia), data.subset$Hospital.Name), ]
} else {}
View(data.subset)
?rank
x1 <- c(3, 1, 4, 15, 92)
x1
rank(x1)
order(x1)
?order
x1[order(x1),]
x1[order(x1)]
View(data.subset)
hospital.rank <- data.subset$State, as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), data.subset$Hospital.Name)
hospital.rank <- order(data.subset$State, as.numeric(data.subset$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), data.subset$Hospital.Name)
hospital.rank
hospital.rank <- order(data.subset$State)
hospital.rank
?ave
x2 <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
x2
View(data.subset)
data.subset$rank <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
View(data.subset)
## read the data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check for valid outcome
valid.outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid.outcomes)) {
stop("invalid outcome")
}
outcome <-"heart attack"
num <- 20
if (!(outcome %in% valid.outcomes)) {
stop("invalid outcome")
}
## check for valid num
valid.num <- c("best", "worst")
if (!(num %in% valid.num) && !is.numeric(num)) {
stop("invalid num")
}
## store outcome metric in variable
if (outcome == "heart attack") {
outcome.var <- Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
} else if (outcome == "heart failure") {
outcome.var <- Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
} else if (outcome == "pneumonia") {
outcome.var <- Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
} else {}
## store outcome metric in variable
if (outcome == "heart attack") {
outcome.var <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
outcome.var <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
outcome.var <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {}
## state list
list.states <- unique(data$State)
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data$!!outcome.var)), ]
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data$!outcome.var)), ]
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data$!!outcome.var)), ]
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data[, !!outcome.var])), ]
?select.list
?eval
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data$eval(outcome.var))), ]
eval(outcome.var)
## subset data by non missing outcome
data.subset <- data[!is.na(as.numeric(data[,eval(outcome.var)])), ]
View(data.subset)
## order the rows by state, outcome, hospital name
data.subset <- data.subset[order(data.subset$State, as.numeric(data[,eval(outcome.var)]), data.subset$Hospital.Name), ]
## order the rows by state, outcome, hospital name
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset[,eval(outcome.var)]), data.subset$Hospital.Name), ]
View(data.subset)
## check that num argument is less than the number of hospitals in the subset
if (is.numeric(num) && num > nrow(data.subset)) {
return(NA)
stop()
}
## create ranking variable within state
data.subset$rank <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset[,eval(outcome.var)]), data.subset$Hospital.Name), ]
data.subset$rankbest  <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
View(data.subset)
data.subset <- data.subset[order(data.subset$State, -as.numeric(data.subset[,eval(outcome.var)]), -data.subset$Hospital.Name), ]
data.subset$rankworst <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
?order
data.subset <- data.subset[order(data.subset$State, as.numeric(data.subset[,eval(outcome.var)]), data.subset$Hospital.Name, decreasing = TRUE), ]
data.subset$rankworst <- ave(data.subset$Hospital.Name, data.subset$State, FUN = seq_along)
View(data.subset)
## pull hospitals based on rakn for each state
data.state <- data.subset[rankbest == num, ]
## pull hospitals based on rakn for each state
data.state <- data.subset[data.subset$rankbest == num, ]
View(data.state)
## pull hospitals based on rakn for each state
if (num == "best") {
data.state <- data.subset[data.subset$rankbest == 1, ]
} else if (num == "worst") {
data.state <- data.subset[data.subset$rankworst == 1, ]
} else (is.numeric(num)) {
data.state <- data.subset[data.subset$rankbest == num, ]
}
## pull hospitals based on rakn for each state
if (num == "best") {
data.state <- data.subset[data.subset$rankbest == 1, ]
} else if (num == "worst") {
data.state <- data.subset[data.subset$rankworst == 1, ]
} else (is.numeric(num)) {
data.state <- data.subset[data.subset$rankbest == num, ]
}
## pull hospitals based on rakn for each state
if (num == "best") {
data.state <- data.subset[data.subset$rankbest == 1, ]
} else if (num == "worst") {
data.state <- data.subset[data.subset$rankworst == 1, ]
} else {
data.state <- data.subset[data.subset$rankbest == num, ]
}
View(data.state)
list.states
as.data.frame(list.states)
?merge
final.data <- merge(as.data.frame(list.states), data.state, by.x = "list.state", by.y = "State", all.x = TRUE)
final.data <- merge(x = as.data.frame(list.states), y = data.state, by.x = "list.state", by.y = "State", all.x = TRUE)
View(data.state)
final.data <- merge(x = as.data.frame(list.states), y = data.state, by.x = "list.states", by.y = "State", all.x = TRUE)
View(final.data)
final.data <- final.data[, c("Hospital.Name", list.states)]
final.data <- final.data[, c("Hospital.Name", "list.states")]
View(final.data)
colnames(final.data$list.states) <- "state"
colnames(final.data$Hospital.Name) <- "hospital"
?colnames
colnames(final.data) <- c("hospital", "state")
View(final.data)
final.data
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankall.R')
tail(rankall("heart failure"), 10)
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/best.R')
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankhospital.r')
source('C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/ProgrammingAssignment3/rankall.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(XML)
url  <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(url)
rootnode <- xmlRoot(page)
rootnode[[1]][[1]]
rootnode[[1]]
rootnode[[1]][[1]]
?xmlApply
data <- xmlSApply(rootnode, xmlValue)
data <- xmlSApply(rootnode,function(x) xmlSApply(x, xmlValue))
?data.frame
?t
data <- data.frame(t(data), row.names = NULL)
View(data)
?xmlValue
xmlValue(rootnode[[1]][[1]])
rootnode[[1]][[1]]
data <- xmlSApply(rootnode, function(x) {xmlSApply(x, xmlValue, trim = FALSE)})
class(data)
dim(data)
data <- xmlApply(rootnode, function(x) {xmlApply(x, xmlValue)})
data
data <- xmlApply(rootnode, function(x) {xmlApply(x, xmlValue, trim = FALSE)})
head(data)
data <- xmlApply(rootnode, function(x) {xmlApply(x, xmlValue, trim = TRUE)})
data[1]
?xmlToList
data <- xmlToList(page)
dim(data)
data <- data.frame(data, row.names = NULL)
View(data)
?xmlToDataFrame
data <- xmlToDataFrame(page)
data <- xmlToDataFrame(rootnode)
data <- xmlToList(rootnode)
data <- xmlToDataFrame(url)
View(data)
url  <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlParse(url)
topxml <- xmlRoot(page)
class(page)
class(topxml)
topxml[[1]][[1]][[1]]
topxml <- xmlSApply(topxml, function(x) xmlSApply(x, xmlValue))
