cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags[,11:17]
flag_colors <- flags[,11:17]
head_flag_colors
head(flag_colors)
sapply(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lappy(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
spply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate
table(flags$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
head(iris)
mean(iris$Sepal.Length)
colmeans(iris)
colMeans(iris)
?apply
apply(iris[,1:4], 2, mean)
?tapply
with(mtcars, tapply(mpg, cylmean))
with(mtcars, tapply(mpg, cyl,mean))
sapply(split(ntcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp
class(hp)
hp[1]
hp[1]-hp3
hp[1]-hp[3]
debug(ls)
ls()
quit()
exit()
set.seed(1)
rpois(5, 2)
?dpois
?cpois
?qpois
swirl()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), prob = c(.3, .7))
sample(c(0,1), 100, prob = c(.3, .7))
sample(c(0,1), 100, prob = c(.3, .7), replace = TRUE)
sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, lambde = 10)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed, y = dist)
plot(data = cars, x=speed, y = dist)
plot(x=cars$speed, y = cars$dist)
plot(x=cars$dist, y = cars$speed)
?plot
plot(x=cars$dist, y = cars$speed, xlab = "Speed")
plot(x=cars$dist, y = cars$speed, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y = cars$dist, main = "My Plot"
)
plot(x=cars$speed, y = cars$dist, main = "My Plot")
plot(x=cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", title = "My Plot Subtitle")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(mtcars, mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
exit()
library(data.table)
?fread
## load in the data
my_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ",",
nrows = 100)
## load in the data
my_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ",",
nrows = 100)
my_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ",",
nrows = 100)
y_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ",",
nrows = 100)
my_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ',',
nrows = 100)
my_data <- fread("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\data\IdahoHousing.csv",
sep = ',',
nrows = 100)
my_data <- fread("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/IdahoHousing.csv",
sep = ',',
nrows = 100)
View(my_data)
my_data <- fread("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/IdahoHousing.csv",
sep = ',',
header = TRUE,
nrows = 100,
colClasses = "character")
my_data <- fread("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/IdahoHousing.csv",
sep = ',',
header = TRUE,
colClasses = "character")
class(my_data)
dim(my_data)
str(my_data)
names(my_data)
View(my_data)
my_data[[Val == 24]]
my_data[[Val == 24]]
tables()
my_data[Val == 24,]
my_data[VAL == 24,]
nrow(my_data[VAL == 24,])
## load in the data
my_data <- fread("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/data/Clean Data/Natural_Gas.csv",
sep = ',',
header = TRUE,
colClasses = "character")
install.packages("xlsx")
library(xlsx)
install.packages("XML")
library(XML)
?xmlTreeParse
url  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(url, useInternal = FALSE)
url  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(url)
url  <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(url)
url  <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(url)
View(page)
rootnode <- xmlRoot(page)
rootnode[[1]]
rootnode[[1][1]]
rootnode[[1]][[1]]
?xmlValue
setwd("C:\Users\castnerj\Desktop\Coursera\datasciencecoursera\03 Getting and Cleaning Data\Week 2\Quiz")
setwd("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/03 Getting and Cleaning Data/Week 2/Quiz")
library(tidyverse)
setwd("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/03 Getting and Cleaning Data/Week 2/Quiz")
?read_csv
acs <- read_csv("ss06pid.csv")
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
str(acs)
class(acs)
head(acs[, PWGTP])
acs[1:5, WGTP]
acs[1:5, PWGTP]
acs[1:5, PWGTP]
acs[1:5, acs$PWGTP]
acs[1:5, acs$PWGTP1]
sqldf("select PWGTP from acs where AGEP < 50")
?sqldf
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select PWGTP from acs where AGEP < 50")
?sqldf
library(tidyverse)
library(sqldf)
setwd("C:/Users/castnerj/Desktop/Coursera/datasciencecoursera/03 Getting and Cleaning Data/Week 2/Quiz")
### Question 2
acs <- read_csv("ss06pid.csv")
sqldf("select PWGTP from acs where AGEP < 50")
### Question 3
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
### Question 3
length(unique(acs$AGEP))
length(sqldf("select distinct AGEP from acs"))
nrow(sqldf("select distinct AGEP from acs"))
library(xml)
library(XML)
html <- htmlTreeParse(url, useInternalNodes = TRUE)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(connection)
close(connection)
html
class(html)
str(html)
length(html)
html[20]
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
### Question 5
mydata <- read_csv("wksst8110.for")
?read_csv
### Question 5
mydata <- read_csv("wksst8110.for", skip = 5)
View(mydata)
?read_tsv
### Question 5
mydata <- read_tsv("wksst8110.for", skip = 5)
View(mydata)
?read_delim
### Question 5
mydata <- read_delim("wksst8110.for", delim = "     ", skip = 5)
View(mydata)
### Question 5
mydata <- read_delim("wksst8110.for", delim = " ", skip = 5)
View(mydata)
?read.fortran
### Question 5
mydata <- read.fortran("wksst8110.for")
### Question 5
mydata <- read.fortran("wksst8110.for", c("A1","A2","A3", "A4", "A5"))
View(mydata)
### Question 5
mydata <- read.fortran("wksst8110.for", c("A1", "F2.1", "F3.1", "F4.1", "F5.1", "F6.1", "F7.1", "F8.1", "F9.1"))
mydata <- read.fortran("wksst8110.for"
,format = c("A1", "F2.1", "F3.1", "F4.1", "F5.1", "F6.1", "F7.1", "F8.1", "F9.1")
,skip = 4)
?readlines
?readLines
gsub("\\$ ","", readLines("wksst8110.for", n=9)[-1])
gsub("\\$ ","", readLines("wksst8110.for", n=4)[-1])
gsub("\\$ ","", readLines("wksst8110.for", n=5)[-1])
readLines("wksst8110.for", n=4)
?gsub
readLines("wksst8110.for", n=4)
readLines("wksst8110.for", n=4)[-2]
readLines("wksst8110.for", n=4)[-1]
readLines("wksst8110.for", n=4)[0]
readLines("wksst8110.for", n=4)[-3]
readLines("wksst8110.for", n=4)[-1:-2]
mydata <- read.fortran("wksst8110.for"
,format = c("A1", "2F2.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
### Question 5
mydata <- read.fortran("wksst8110.for"
,format = c("9A1", "2F2.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
### Question 5
mydata <- read.fortran("wksst8110.for"
,format = c("9A1", "4F2.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
### Question 5
mydata <- read.fortran("wksst8110.for"
,format = c("A9", "F4.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
### Question 5
mydata <- read.fortran("wksst8110.for"
,format = c("9A9", "F4.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
View(mydata)
### Question 5
mydata <- read.fortran("wksst8110.for"
,format = c("9A10", "F4.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
mydata <- read.fortran("wksst8110.for"
,format = c("9A10", "1F4.1", "1F3.1", "2F4.1", "1F5.1", "2F6.1", "1F7.1", "2F8.1", "1F9.1")
,skip = 4)
mydata <- read_fwf("wksst8110.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 4)
### Question 5
mydata <- read_fwf("wksst8110.for", skip = 4, widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
### Question 5
mydata <- read_fwf(file = "wksst8110.for", skip = 4, widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
### Question 5
mydata <- read_fwf(file = "wksst8110.for", skip = 4, fwf_widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
read_fwf
?read_fwf
### Question 5
mydata <- read_fwf(file = "wksst8110.for",
skip = 4,
fwf_widths(c(12, 7, 4, 9, 4, 9, 4, 9, 4)))
View(mydata)
sum(mydata[, 4])
library(swirl)
swir()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
str(mydf)
cran <- tbl_df(mydf)
remove(acs)
remove(html)
remove(connections)
remove(connection)
remove(mydf)
rm("mydata")
rm("mydata")
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
cran(-(X:size))
select(cran,(-(X:size)))
select(cran,(-(time:size)))
select(cran, -(country:r_arch))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country %IN% c("India")
filter(cran, r_version <= "3.0.2", country %IN% c("India")
filter(cran, r_version <= "3.0.2", country %in% c("India")
filter(cran, r_version <= "3.0.2", country %in% c("India")
filter(cran, r_version <= "3.0.2", country %in% "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count())
top_counts_sorted <- arrange(top_counts, count
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, count > 465)
top_unique <- filter(pack_sum, unique() > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arange(top_unique, desc(unique)
)
top_unique_sorted <- arange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
studetns
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spreaad()
?spread()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
submit()
submit()
submit()
